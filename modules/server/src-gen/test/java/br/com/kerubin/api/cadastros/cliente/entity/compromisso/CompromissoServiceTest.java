/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.cliente.entity.compromisso;

import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteEntity;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoEntity;
import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteLookupResult;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoLookupResult;
import br.com.kerubin.api.cadastros.cliente.CompromissoSituacao;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import javax.inject.Inject;
import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteRepository;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoRepository;
import org.springframework.boot.test.mock.mockito.MockBean;
import br.com.kerubin.api.messaging.core.DomainEntityEventsPublisher;
import br.com.kerubin.api.cadastros.cliente.TipoPessoa;
import br.com.kerubin.api.cadastros.cliente.UF;
import java.util.Arrays;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.ArgumentMatchers.any;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import br.com.kerubin.api.cadastros.cliente.common.PageResult;
import java.util.Collections;
import org.springframework.data.domain.Sort;
import java.util.Collection;
import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteAutoComplete;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoAutoComplete;

import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;
import br.com.kerubin.api.cadastros.cliente.CadastrosClienteBaseEntityTest;


@RunWith(SpringRunner.class)
public class CompromissoServiceTest extends CadastrosClienteBaseEntityTest {
	
	private static final String[] IGNORED_FIELDS = { "id", "createdBy", "createdDate", "lastModifiedBy", "lastModifiedDate", "recursos" };
	
	@TestConfiguration
	static class CompromissoServiceTestConfig {
		
		@Bean
		public CompromissoListFilterPredicate compromissoListFilterPredicate() {
			return new CompromissoListFilterPredicateImpl();
		}
		
		@Bean
		public CompromissoService compromissoService() {
			return new CompromissoServiceImpl();
		}
		
		@Bean
		public CompromissoDTOConverter compromissoDTOConverter() {
			return new CompromissoDTOConverter();
		}
		
	}
	
	
	@Inject
	protected CompromissoService compromissoService;
	
	@Inject
	protected CompromissoDTOConverter compromissoDTOConverter;
	
	@Inject
	protected CompromissoRepository compromissoRepository;
	
	@Inject
	protected ClienteRepository clienteRepository;
	
	@Inject
	protected RecursoRepository recursoRepository;
	
	@MockBean
	protected DomainEntityEventsPublisher publisher;
	
	// BEGIN CREATE TESTS
	
	@Test
	public void testCreateWithAllFields() throws Exception {
		/*CompromissoEntity compromisso = new CompromissoEntity();
		
		compromisso.setTitulo(generateRandomString(255));
		
		ClienteEntity clienteEntityParam = newClienteEntity();
		compromisso.setCliente(clienteEntityParam);
		
		compromisso.setDataIni(getNextDate());
		compromisso.setHoraIni(java.time.LocalTime.now());
		compromisso.setDataFim(getNextDate());
		compromisso.setHoraFim(java.time.LocalTime.now());
		compromisso.setDiaTodo(false);
		compromisso.setSituacao(CompromissoSituacao.NAO_INICIADO);
		compromisso.setDescricao(generateRandomString(1000));
		compromisso.setLocal(generateRandomString(255));
		
		RecursoEntity recursoEntityParam = newRecursoEntity(compromisso);
		compromisso.setRecursos(Arrays.asList(recursoEntityParam));
		
		CompromissoEntity compromissoEntity = compromissoService.create(compromisso);
		em.flush();
		verify(publisher, times(0)).publish(any());
		CompromissoEntity actual = compromissoEntity;
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(compromisso, IGNORED_FIELDS);
		
		
		assertThat(actual.getCliente().getId()).isNotNull();
		assertThat(actual.getCliente()).isEqualToIgnoringGivenFields(compromisso.getCliente(), IGNORED_FIELDS);
		
		
		assertThat(actual.getRecursos()).isNotNull();
		assertThat(actual.getRecursos()).hasSize(1);
		assertThat(actual.getRecursos().get(0).getId()).isNotNull();
		assertThat(actual.getRecursos().get(0)).isEqualToIgnoringGivenFields(compromisso.getRecursos().get(0), IGNORED_FIELDS);*/
		
		
	}
	
	@Test
	public void testCreateWithOnlyRecairedFields() throws Exception {
		CompromissoEntity compromisso = new CompromissoEntity();
		
		compromisso.setTitulo(generateRandomString(255));
		compromisso.setDataIni(getNextDate());
		compromisso.setHoraIni(java.time.LocalTime.now());
		compromisso.setSituacao(CompromissoSituacao.NAO_INICIADO);
		CompromissoEntity compromissoEntity = compromissoService.create(compromisso);
		em.flush();
		verify(publisher, times(0)).publish(any());
		CompromissoEntity actual = compromissoEntity;
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(compromisso, IGNORED_FIELDS);
		
		assertThat(actual.getCliente()).isNull();
		assertThat(actual.getRecursos()).isEmpty();
		
	}
	// END CREATE TESTS
	
	// BEGIN READ TESTS
	
	@Test
	public void testRead1() {
		CompromissoEntity expectedCompromissoEntity = newCompromissoEntity();
		java.util.UUID id = expectedCompromissoEntity.getId();
		Compromisso expected = compromissoDTOConverter.convertEntityToDto(expectedCompromissoEntity);
		CompromissoEntity readCompromissoEntity = compromissoService.read(id);
		Compromisso actual = compromissoDTOConverter.convertEntityToDto(readCompromissoEntity);
		
		assertThat(actual).isEqualToComparingFieldByField(expected);
		
	}
	// END READ TESTS
	
	// BEGIN UPDATE TESTS
	
	@Test
	public void testUpdateWithAllFields() throws Exception {
		/*CompromissoEntity oldCompromissoEntity = newCompromissoEntity();
		java.util.UUID id = oldCompromissoEntity.getId();
				
		CompromissoEntity compromisso = new CompromissoEntity();
		compromisso.setId(id);
		
		compromisso.setTitulo(generateRandomString(255));
		
		ClienteEntity clienteEntityParam = newClienteEntity();
		compromisso.setCliente(clienteEntityParam);
		
		compromisso.setDataIni(getNextDate());
		compromisso.setHoraIni(java.time.LocalTime.now());
		compromisso.setDataFim(getNextDate());
		compromisso.setHoraFim(java.time.LocalTime.now());
		compromisso.setDiaTodo(false);
		compromisso.setSituacao(CompromissoSituacao.NAO_INICIADO);
		compromisso.setDescricao(generateRandomString(1000));
		compromisso.setLocal(generateRandomString(255));
		
		RecursoEntity recursoEntityParam = newRecursoEntity(compromisso);
		compromisso.setRecursos(Arrays.asList(recursoEntityParam));
		
		CompromissoEntity compromissoEntity = compromissoService.update(id, compromisso);
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		CompromissoEntity actual = compromissoEntity;
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(compromisso, IGNORED_FIELDS);
		
		
		assertThat(actual.getCliente().getId()).isNotNull();
		assertThat(actual.getCliente()).isEqualToIgnoringGivenFields(compromisso.getCliente(), IGNORED_FIELDS);
		
		
		assertThat(actual.getRecursos()).isNotNull();
		assertThat(actual.getRecursos()).hasSize(1);
		assertThat(actual.getRecursos().get(0).getId()).isNotNull();
		assertThat(actual.getRecursos().get(0)).isEqualToIgnoringGivenFields(compromisso.getRecursos().get(0), IGNORED_FIELDS);*/
		
		
	}
	
	@Test
	public void testUpdateWithOnlyRecairedFields() throws Exception {
		CompromissoEntity oldCompromissoEntity = newCompromissoEntity();
		java.util.UUID id = oldCompromissoEntity.getId();
				
		CompromissoEntity compromisso = new CompromissoEntity();
		compromisso.setId(id);
		
		compromisso.setTitulo(generateRandomString(255));
		compromisso.setDataIni(getNextDate());
		compromisso.setHoraIni(java.time.LocalTime.now());
		compromisso.setSituacao(CompromissoSituacao.NAO_INICIADO);
		CompromissoEntity compromissoEntity = compromissoService.update(id, compromisso);
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		CompromissoEntity actual = compromissoEntity;
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(compromisso, IGNORED_FIELDS);
		
		assertThat(actual.getCliente()).isNull();
		assertThat(actual.getRecursos()).isEmpty();
		
	}
	// END UPDATE TESTS
	
	// BEGIN DELETE TESTS
	
	@Test
	public void testDelete1() {
		CompromissoEntity expected = newCompromissoEntity();
		java.util.UUID id = expected.getId();
		
		
		expected = em.find(CompromissoEntity.class, id);
		assertThat(expected).isNotNull();
		compromissoService.delete(id);
		verify(publisher, times(0)).publish(any());
		
		expected = em.find(CompromissoEntity.class, id);
		assertThat(expected).isNull();
	}
	// END DELETE TESTS
	
	// BEGIN LIST TESTS
	
	@Test
	public void testList_FilteringByTitulo() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
		
		// Generate 33 records of data for CompromissoEntity for this test.
		List<CompromissoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newCompromissoEntity());
		}
		
		// Check if 33 records of CompromissoEntity was generated.
		long count = compromissoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Creates a list filter for entity Compromisso.
		CompromissoListFilter listFilter = new CompromissoListFilter();
		
		// Extracts 7 records of CompromissoEntity randomly from testData.
		final int resultSize = 7;
		List<CompromissoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only CompromissoEntity.titulo field and configure this list as a filter.
		List<String> tituloListFilter = filterTestData.stream().map(CompromissoEntity::getTitulo).collect(Collectors.toList());
		listFilter.setTitulo(tituloListFilter);
		
		// Generates a pageable configuration, without sorting.
		int pageIndex = 0; // First page starts at index zero.
		int size = 33; // Max of 33 records per page.
		Pageable pageable = PageRequest.of(pageIndex, size);
		// Call service list method.
		Page<CompromissoEntity> page = compromissoService.list(listFilter, pageable);
		
		// Converts found entities to DTOs and mount the result page.
		List<Compromisso> content = page.getContent().stream().map(it -> compromissoDTOConverter.convertEntityToDto(it)).collect(Collectors.toList());
		PageResult<Compromisso> pageResult = new PageResult<>(content, page.getNumber(), page.getSize(), page.getTotalElements());
		
		// Asserts that result has size 7, in any order and has only rows with tituloListFilter elements based on titulo field.
		assertThat(pageResult.getContent())
		.hasSize(7)
		.extracting(Compromisso::getTitulo)
		.containsExactlyInAnyOrderElementsOf(tituloListFilter);
		
		// Asserts some page result elements.
		assertThat(pageResult.getNumber()).isEqualTo(pageIndex);
		assertThat(pageResult.getNumberOfElements()).isEqualTo(7);
		assertThat(pageResult.getTotalElements()).isEqualTo(7);
		assertThat(pageResult.getTotalPages()).isEqualTo(1);
		
	}
	
	@Test
	public void testList_FilteringByTituloWithoutResults() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for CompromissoEntity for this test.
		List<CompromissoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newCompromissoEntity());
		}
		
		// Check if 33 records of CompromissoEntity was generated.
		long count = compromissoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Creates a list filter for entity Compromisso.
		CompromissoListFilter listFilter = new CompromissoListFilter();
		
		// Generates a list with only CompromissoEntity.titulo field with 1 not found data in the database and configure this list as a filter.
		List<String> tituloListFilter = Arrays.asList(generateRandomString(255));
		listFilter.setTitulo(tituloListFilter);
		
		// Generates a pageable configuration, without sorting.
		int pageIndex = 0; // First page starts at index zero.
		int size = 33; // Max of 33 records per page.
		Pageable pageable = PageRequest.of(pageIndex, size);
		// Call service list method.
		Page<CompromissoEntity> page = compromissoService.list(listFilter, pageable);
		
		// Converts found entities to DTOs and mount the result page.
		List<Compromisso> content = page.getContent().stream().map(it -> compromissoDTOConverter.convertEntityToDto(it)).collect(Collectors.toList());
		PageResult<Compromisso> pageResult = new PageResult<>(content, page.getNumber(), page.getSize(), page.getTotalElements());
		
		// Asserts that result has size 0 for unknown titulo field.
		assertThat(pageResult.getContent()).hasSize(0);
		
	}
	
	@Test
	public void testList_SortingByDataIni() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
		
		// Generate 10 records of data for CompromissoEntity for this test.
		List<CompromissoEntity> testData = new ArrayList<>();
		final int lastRecord = 10;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newCompromissoEntity());
		}
		
		// Check if 10 records of CompromissoEntity was generated.
		long count = compromissoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Creates a list filter for entity Compromisso.
		CompromissoListFilter listFilter = new CompromissoListFilter();
		
		// Generates a pageable configuration, with sorting.
		Sort sort = Sort.by("dataIni").ascending(); // select ... order by dataIni ascending
		int pageIndex = 0; // First page starts at index zero.
		int size = 10; // Max of 10 records per page.
		Pageable pageable = PageRequest.of(pageIndex, size, sort);
		
		// Call service list method.
		Page<CompromissoEntity> page = compromissoService.list(listFilter, pageable);
		
		// Converts found entities to DTOs and mount the result page.
		List<Compromisso> content = page.getContent().stream().map(it -> compromissoDTOConverter.convertEntityToDto(it)).collect(Collectors.toList());
		PageResult<Compromisso> pageResult = new PageResult<>(content, page.getNumber(), page.getSize(), page.getTotalElements());
		
		// Extracts a list with only CompromissoEntity.dataIni fields.
		List<java.time.LocalDate> dataIniTestDataList = testData.stream().map(CompromissoEntity::getDataIni).collect(Collectors.toList());
		
		// Sort dataIni in ascending order.
		Collections.sort(dataIniTestDataList);
	
		// Asserts that result has size 10 in a specific order.
		assertThat(pageResult.getContent())
		.hasSize(10)
		.extracting(Compromisso::getDataIni)
		.containsExactlyElementsOf(dataIniTestDataList);
		
		// Asserts some page result elements.
		assertThat(pageResult.getNumber()).isEqualTo(pageIndex);
		assertThat(pageResult.getNumberOfElements()).isEqualTo(10);
		assertThat(pageResult.getTotalElements()).isEqualTo(10);
		assertThat(pageResult.getTotalPages()).isEqualTo(1);
		
	}
	// END LIST TESTS
	
	// BEGIN Autocomplete TESTS
	@Test
	public void testAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for CompromissoEntity for this test.
		List<CompromissoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newCompromissoEntity());
		}
		
		// Check if 33 records of CompromissoEntity was generated.
		long count = compromissoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of CompromissoEntity randomly from testData.
		final int resultSize = 1;
		List<CompromissoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only CompromissoEntity.titulo field and configure this list as a filter.
		List<String> tituloListFilter = filterTestData.stream().map(CompromissoEntity::getTitulo).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = tituloListFilter.get(0);
		Collection<CompromissoAutoComplete> result = compromissoService.autoComplete(query);
		
		// Assert CompromissoAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(CompromissoAutoComplete::getTitulo)
		.containsExactlyInAnyOrderElementsOf(tituloListFilter);
	}
	
	// END Autocomplete TESTS
	
	// BEGIN ListFilter Autocomplete TESTS
	
	@Test
	public void testCompromissoTituloAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for CompromissoEntity for this test.
		List<CompromissoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newCompromissoEntity());
		}
		
		// Check if 33 records of CompromissoEntity was generated.
		long count = compromissoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of CompromissoEntity randomly from testData.
		final int resultSize = 1;
		List<CompromissoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only CompromissoEntity.titulo field and configure this list as a filter.
		List<String> tituloListFilter = filterTestData.stream().map(CompromissoEntity::getTitulo).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = tituloListFilter.get(0);
		Collection<CompromissoTituloAutoComplete> result = compromissoService.compromissoTituloAutoComplete(query);
		// Assert CompromissoTituloAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(CompromissoTituloAutoComplete::getTitulo)
		.containsExactlyInAnyOrderElementsOf(tituloListFilter);
	}
	
	// END ListFilter Autocomplete TESTS
	
	// BEGIN Relationships Autocomplete TESTS
	
	@Test
	public void testCompromissoClienteAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for ClienteEntity for this test.
		List<ClienteEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newClienteEntity());
		}
		
		// Check if 33 records of ClienteEntity was generated.
		long count = clienteRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of ClienteEntity randomly from testData.
		final int resultSize = 1;
		List<ClienteEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only ClienteEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(ClienteEntity::getNome).collect(Collectors.toList());
		String query = nomeListFilter.get(0);
		
		Collection<ClienteAutoComplete> result = compromissoService.clienteClienteAutoComplete(query);
		
		assertThat(result).isNotNull().hasSize(1)
		.extracting(ClienteAutoComplete::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
	}
	
	
	@Test
	public void testCompromissoRecursosAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for RecursoEntity for this test.
		List<RecursoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newRecursoEntity());
		}
		
		// Check if 33 records of RecursoEntity was generated.
		long count = recursoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of RecursoEntity randomly from testData.
		final int resultSize = 1;
		List<RecursoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only RecursoEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(RecursoEntity::getNome).collect(Collectors.toList());
		String query = nomeListFilter.get(0);
		
		Collection<RecursoAutoComplete> result = compromissoService.recursoRecursosAutoComplete(query);
		
		assertThat(result).isNotNull().hasSize(1)
		.extracting(RecursoAutoComplete::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
	}
	
	// END Relationships Autocomplete TESTS
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN TESTS DEPENDENCIES
	protected CompromissoEntity newCompromissoEntity() {
		return newCompromissoEntity(2);
	}
	
	
	
	protected CompromissoEntity newCompromissoEntity(int oneToManySize) {
		CompromissoEntity compromissoEntity = new CompromissoEntity();
		
		/*compromissoEntity.setTitulo(generateRandomString(255));
		compromissoEntity.setCliente(newClienteEntity());
		compromissoEntity.setDataIni(getNextDate());
		compromissoEntity.setHoraIni(java.time.LocalTime.now());
		compromissoEntity.setDataFim(getNextDate());
		compromissoEntity.setHoraFim(java.time.LocalTime.now());
		compromissoEntity.setDiaTodo(false);
		compromissoEntity.setSituacao(CompromissoSituacao.NAO_INICIADO);
		compromissoEntity.setDescricao(generateRandomString(1000));
		compromissoEntity.setLocal(generateRandomString(255));
		
		compromissoEntity.setRecursos(newRecursoEntity(compromissoEntity, oneToManySize));
		compromissoEntity = em.persistAndFlush(compromissoEntity);*/
		return compromissoEntity;
	}
	
	
	protected CompromissoLookupResult newCompromissoLookupResult(CompromissoEntity compromissoEntity) {
		CompromissoLookupResult compromisso = new CompromissoLookupResult();
		
		compromisso.setId(compromissoEntity.getId());
		compromisso.setTitulo(compromissoEntity.getTitulo());
		
		return compromisso;
	}
	
	
	protected ClienteEntity newClienteEntity() {
		ClienteEntity clienteEntity = new ClienteEntity();
		
		clienteEntity.setTipoPessoa(TipoPessoa.PESSOA_JURIDICA);
		clienteEntity.setNome(generateRandomString(255));
		clienteEntity.setMaisOpcoes(false);
		clienteEntity.setCnpjCPF("92020472007");
		clienteEntity.setIeRG(generateRandomString(255));
		clienteEntity.setDataFundacaoNascimento(getNextDate());
		clienteEntity.setNomeContato(generateRandomString(255));
		clienteEntity.setFone(generateRandomString(255));
		clienteEntity.setCelular(generateRandomString(255));
		clienteEntity.setEmail("fortest@gmail.com");
		clienteEntity.setSite("http://www.fortest.com");
		clienteEntity.setCep(generateRandomString(255));
		clienteEntity.setUf(UF.SC);
		clienteEntity.setCidade(generateRandomString(255));
		clienteEntity.setBairro(generateRandomString(255));
		clienteEntity.setEndereco(generateRandomString(255));
		clienteEntity.setNumero(generateRandomString(255));
		clienteEntity.setComplemento(generateRandomString(255));
		clienteEntity.setObservacoes(generateRandomString(1000));
		clienteEntity.setAtivo(true);
		
		clienteEntity = em.persistAndFlush(clienteEntity);
		return clienteEntity;
	}
	
	
	protected ClienteLookupResult newClienteLookupResult(ClienteEntity clienteEntity) {
		ClienteLookupResult cliente = new ClienteLookupResult();
		
		cliente.setId(clienteEntity.getId());
		cliente.setNome(clienteEntity.getNome());
		
		return cliente;
	}
	
	
	protected RecursoEntity newRecursoEntity() {
		RecursoEntity recursoEntity = new RecursoEntity();
		
		recursoEntity.setNome(generateRandomString(255));
		recursoEntity.setEmail("fortest@gmail.com");
		recursoEntity.setAtivo(true);
		
		recursoEntity = em.persistAndFlush(recursoEntity);
		return recursoEntity;
	}
	
	
	protected RecursoLookupResult newRecursoLookupResult(RecursoEntity recursoEntity) {
		RecursoLookupResult recurso = new RecursoLookupResult();
		
		recurso.setId(recursoEntity.getId());
		recurso.setNome(recursoEntity.getNome());
		recurso.setEmail(recursoEntity.getEmail());
		
		return recurso;
	}
	// END TESTS DEPENDENCIES

}
