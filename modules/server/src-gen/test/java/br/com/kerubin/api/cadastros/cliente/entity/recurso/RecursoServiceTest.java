/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.cliente.entity.recurso;

import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import javax.inject.Inject;
import org.springframework.boot.test.mock.mockito.MockBean;
import br.com.kerubin.api.messaging.core.DomainEntityEventsPublisher;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.ArgumentMatchers.any;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import br.com.kerubin.api.cadastros.cliente.common.PageResult;
import java.util.Arrays;
import java.util.Collection;

import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;
import br.com.kerubin.api.cadastros.cliente.CadastrosClienteBaseEntityTest;


@RunWith(SpringRunner.class)
public class RecursoServiceTest extends CadastrosClienteBaseEntityTest {
	
	private static final String[] IGNORED_FIELDS = { "id", "createdBy", "createdDate", "lastModifiedBy", "lastModifiedDate" };
	
	@TestConfiguration
	static class RecursoServiceTestConfig {
		
		@Bean
		public RecursoListFilterPredicate recursoListFilterPredicate() {
			return new RecursoListFilterPredicateImpl();
		}
		
		@Bean
		public RecursoService recursoService() {
			return new RecursoServiceImpl();
		}
		
		@Bean
		public RecursoDTOConverter recursoDTOConverter() {
			return new RecursoDTOConverter();
		}
		
	}
	
	
	@Inject
	protected RecursoService recursoService;
	
	@Inject
	protected RecursoDTOConverter recursoDTOConverter;
	
	@Inject
	protected RecursoRepository recursoRepository;
	
	@MockBean
	protected DomainEntityEventsPublisher publisher;
	
	// BEGIN CREATE TESTS
	
	@Test
	public void testCreateWithAllFields() throws Exception {
		Recurso recurso = new Recurso();
		
		recurso.setId(java.util.UUID.randomUUID());
		recurso.setNome(generateRandomString(255));
		recurso.setEmail("fortest@gmail.com");
		recurso.setAtivo(true);
		RecursoEntity recursoEntity = recursoService.create(recursoDTOConverter.convertDtoToEntity(recurso));
		em.flush();
		verify(publisher, times(0)).publish(any());
		Recurso actual = recursoDTOConverter.convertEntityToDto(recursoEntity);
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(recurso, IGNORED_FIELDS);
		
		
	}
	
	@Test
	public void testCreateWithOnlyRecairedFields() throws Exception {
		Recurso recurso = new Recurso();
		
		recurso.setId(java.util.UUID.randomUUID());
		recurso.setNome(generateRandomString(255));
		RecursoEntity recursoEntity = recursoService.create(recursoDTOConverter.convertDtoToEntity(recurso));
		em.flush();
		verify(publisher, times(0)).publish(any());
		Recurso actual = recursoDTOConverter.convertEntityToDto(recursoEntity);
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(recurso, IGNORED_FIELDS);
		
		
	}
	// END CREATE TESTS
	
	// BEGIN READ TESTS
	
	@Test
	public void testRead1() {
		RecursoEntity expectedRecursoEntity = newRecursoEntity();
		java.util.UUID id = expectedRecursoEntity.getId();
		Recurso expected = recursoDTOConverter.convertEntityToDto(expectedRecursoEntity);
		RecursoEntity readRecursoEntity = recursoService.read(id);
		Recurso actual = recursoDTOConverter.convertEntityToDto(readRecursoEntity);
		
		assertThat(actual).isEqualToComparingFieldByField(expected);
		
	}
	// END READ TESTS
	
	// BEGIN UPDATE TESTS
	
	@Test
	public void testUpdateWithAllFields() throws Exception {
		RecursoEntity oldRecursoEntity = newRecursoEntity();
		java.util.UUID id = oldRecursoEntity.getId();
				
		Recurso recurso = new Recurso();
		recurso.setId(id);
		
		recurso.setNome(generateRandomString(255));
		recurso.setEmail("fortest@gmail.com");
		recurso.setAtivo(true);
		RecursoEntity recursoEntity = recursoService.update(id, recursoDTOConverter.convertDtoToEntity(recurso));
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		Recurso actual = recursoDTOConverter.convertEntityToDto(recursoEntity);
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(recurso, IGNORED_FIELDS);
		
		
	}
	
	@Test
	public void testUpdateWithOnlyRecairedFields() throws Exception {
		RecursoEntity oldRecursoEntity = newRecursoEntity();
		java.util.UUID id = oldRecursoEntity.getId();
				
		Recurso recurso = new Recurso();
		recurso.setId(id);
		
		recurso.setNome(generateRandomString(255));
		RecursoEntity recursoEntity = recursoService.update(id, recursoDTOConverter.convertDtoToEntity(recurso));
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		Recurso actual = recursoDTOConverter.convertEntityToDto(recursoEntity);
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(recurso, IGNORED_FIELDS);
		
		
	}
	// END UPDATE TESTS
	
	// BEGIN DELETE TESTS
	
	@Test
	public void testDelete1() {
		RecursoEntity expected = newRecursoEntity();
		java.util.UUID id = expected.getId();
		
		
		expected = em.find(RecursoEntity.class, id);
		assertThat(expected).isNotNull();
		recursoService.delete(id);
		verify(publisher, times(0)).publish(any());
		
		expected = em.find(RecursoEntity.class, id);
		assertThat(expected).isNull();
	}
	// END DELETE TESTS
	
	// BEGIN LIST TESTS
	
	@Test
	public void testList_FilteringByNome() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
		
		// Generate 33 records of data for RecursoEntity for this test.
		List<RecursoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newRecursoEntity());
		}
		
		// Check if 33 records of RecursoEntity was generated.
		long count = recursoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Creates a list filter for entity Recurso.
		RecursoListFilter listFilter = new RecursoListFilter();
		
		// Extracts 7 records of RecursoEntity randomly from testData.
		final int resultSize = 7;
		List<RecursoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only RecursoEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(RecursoEntity::getNome).collect(Collectors.toList());
		listFilter.setNome(nomeListFilter);
		
		// Generates a pageable configuration, without sorting.
		int pageIndex = 0; // First page starts at index zero.
		int size = 33; // Max of 33 records per page.
		Pageable pageable = PageRequest.of(pageIndex, size);
		// Call service list method.
		Page<RecursoEntity> page = recursoService.list(listFilter, pageable);
		
		// Converts found entities to DTOs and mount the result page.
		List<Recurso> content = page.getContent().stream().map(it -> recursoDTOConverter.convertEntityToDto(it)).collect(Collectors.toList());
		PageResult<Recurso> pageResult = new PageResult<>(content, page.getNumber(), page.getSize(), page.getTotalElements());
		
		// Asserts that result has size 7, in any order and has only rows with nomeListFilter elements based on nome field.
		assertThat(pageResult.getContent())
		.hasSize(7)
		.extracting(Recurso::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
		
		// Asserts some page result elements.
		assertThat(pageResult.getNumber()).isEqualTo(pageIndex);
		assertThat(pageResult.getNumberOfElements()).isEqualTo(7);
		assertThat(pageResult.getTotalElements()).isEqualTo(7);
		assertThat(pageResult.getTotalPages()).isEqualTo(1);
		
	}
	
	@Test
	public void testList_FilteringByNomeWithoutResults() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for RecursoEntity for this test.
		List<RecursoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newRecursoEntity());
		}
		
		// Check if 33 records of RecursoEntity was generated.
		long count = recursoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Creates a list filter for entity Recurso.
		RecursoListFilter listFilter = new RecursoListFilter();
		
		// Generates a list with only RecursoEntity.nome field with 1 not found data in the database and configure this list as a filter.
		List<String> nomeListFilter = Arrays.asList(generateRandomString(255));
		listFilter.setNome(nomeListFilter);
		
		// Generates a pageable configuration, without sorting.
		int pageIndex = 0; // First page starts at index zero.
		int size = 33; // Max of 33 records per page.
		Pageable pageable = PageRequest.of(pageIndex, size);
		// Call service list method.
		Page<RecursoEntity> page = recursoService.list(listFilter, pageable);
		
		// Converts found entities to DTOs and mount the result page.
		List<Recurso> content = page.getContent().stream().map(it -> recursoDTOConverter.convertEntityToDto(it)).collect(Collectors.toList());
		PageResult<Recurso> pageResult = new PageResult<>(content, page.getNumber(), page.getSize(), page.getTotalElements());
		
		// Asserts that result has size 0 for unknown nome field.
		assertThat(pageResult.getContent()).hasSize(0);
		
	}
	// END LIST TESTS
	
	// BEGIN Autocomplete TESTS
	@Test
	public void testAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for RecursoEntity for this test.
		List<RecursoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newRecursoEntity());
		}
		
		// Check if 33 records of RecursoEntity was generated.
		long count = recursoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of RecursoEntity randomly from testData.
		final int resultSize = 1;
		List<RecursoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only RecursoEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(RecursoEntity::getNome).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = nomeListFilter.get(0);
		Collection<RecursoAutoComplete> result = recursoService.autoComplete(query);
		
		// Assert RecursoAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(RecursoAutoComplete::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
	}
	
	// END Autocomplete TESTS
	
	// BEGIN ListFilter Autocomplete TESTS
	
	@Test
	public void testRecursoNomeAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for RecursoEntity for this test.
		List<RecursoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newRecursoEntity());
		}
		
		// Check if 33 records of RecursoEntity was generated.
		long count = recursoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of RecursoEntity randomly from testData.
		final int resultSize = 1;
		List<RecursoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only RecursoEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(RecursoEntity::getNome).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = nomeListFilter.get(0);
		Collection<RecursoNomeAutoComplete> result = recursoService.recursoNomeAutoComplete(query);
		// Assert RecursoNomeAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(RecursoNomeAutoComplete::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
	}
	
	// END ListFilter Autocomplete TESTS
	
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN TESTS DEPENDENCIES
	
	
	protected RecursoEntity newRecursoEntity() {
		RecursoEntity recursoEntity = new RecursoEntity();
		
		recursoEntity.setNome(generateRandomString(255));
		recursoEntity.setEmail("fortest@gmail.com");
		recursoEntity.setAtivo(true);
		
		recursoEntity = em.persistAndFlush(recursoEntity);
		return recursoEntity;
	}
	
	
	protected RecursoLookupResult newRecursoLookupResult(RecursoEntity recursoEntity) {
		RecursoLookupResult recurso = new RecursoLookupResult();
		
		recurso.setId(recursoEntity.getId());
		recurso.setNome(recursoEntity.getNome());
		recurso.setEmail(recursoEntity.getEmail());
		
		return recurso;
	}
	// END TESTS DEPENDENCIES

}
