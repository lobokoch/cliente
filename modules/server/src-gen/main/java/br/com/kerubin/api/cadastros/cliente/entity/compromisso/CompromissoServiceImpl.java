/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.cliente.entity.compromisso;

// import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;


import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteAutoComplete;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoAutoComplete;

import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteRepository;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoRepository;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Optional;
 
@Service
public class CompromissoServiceImpl implements CompromissoService {
	
	@Autowired
	private CompromissoRepository compromissoRepository;
	
	@Autowired
	private CompromissoListFilterPredicate compromissoListFilterPredicate;
	
	
	@Autowired
	private ClienteRepository clienteRepository;
	
	@Autowired
	private RecursoRepository recursoRepository;
	
	
	@Transactional
	@Override
	public CompromissoEntity create(CompromissoEntity compromissoEntity) {
		return compromissoRepository.save(compromissoEntity);
	}
	
	@Transactional(readOnly = true)
	@Override
	public CompromissoEntity read(java.util.UUID id) {
		return getCompromissoEntity(id);
	}
	
	@Transactional
	@Override
	public CompromissoEntity update(java.util.UUID id, CompromissoEntity compromissoEntity) {
		// CompromissoEntity entity = getCompromissoEntity(id);
		// BeanUtils.copyProperties(compromissoEntity, entity, "id");
		// entity = compromissoRepository.save(entity);
		
		CompromissoEntity entity = compromissoRepository.save(compromissoEntity);
		
		return entity;
	}
	
	@Transactional
	@Override
	public void delete(java.util.UUID id) {
		
		// Delete it.
		compromissoRepository.deleteById(id);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		compromissoRepository.flush();
		
	}
	
	@Transactional
	@Override
	public void deleteInBulk(java.util.List<java.util.UUID> idList) {
		// Delete it.
		compromissoRepository.deleteInBulk(idList);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		compromissoRepository.flush();
	}
	
	
	@Transactional(readOnly = true)
	@Override
	public Page<CompromissoEntity> list(CompromissoListFilter compromissoListFilter, Pageable pageable) {
		Predicate predicate = compromissoListFilterPredicate.mountAndGetPredicate(compromissoListFilter);
		
		Page<CompromissoEntity> resultPage = compromissoRepository.findAll(predicate, pageable);
		return resultPage;
	}
	
	@Transactional(readOnly = true)
	protected CompromissoEntity getCompromissoEntity(java.util.UUID id) {
		Optional<CompromissoEntity> compromissoEntity = compromissoRepository.findById(id);
		if (!compromissoEntity.isPresent()) {
			throw new IllegalArgumentException("Compromisso not found:" + id.toString());
		}
		return compromissoEntity.get();
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<CompromissoAutoComplete> autoComplete(String query) {
		Collection<CompromissoAutoComplete> result = compromissoRepository.autoComplete(query);
		return result;
	}
	
	// Begin relationships autoComplete 
	@Transactional(readOnly = true)
	@Override
	public Collection<ClienteAutoComplete> clienteClienteAutoComplete(String query) {
		Collection<ClienteAutoComplete> result = clienteRepository.autoComplete(query);
		return result;
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<RecursoAutoComplete> recursoRecursosAutoComplete(String query) {
		Collection<RecursoAutoComplete> result = recursoRepository.autoComplete(query);
		return result;
	}
	
	// End relationships autoComplete
	
	
	@Transactional(readOnly = true)
	@Override
	public Collection<CompromissoTituloAutoComplete> compromissoTituloAutoComplete(String query) {
		Collection<CompromissoTituloAutoComplete> result = compromissoRepository.compromissoTituloAutoComplete(query);
		return result;
	}
	
	
}
