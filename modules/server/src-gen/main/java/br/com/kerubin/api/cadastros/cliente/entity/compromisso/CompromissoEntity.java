/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.cliente.entity.compromisso;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Id;
import javax.persistence.Column;
import br.com.kerubin.api.database.entity.AuditingEntity;
import javax.persistence.GeneratedValue;
import org.hibernate.annotations.GenericGenerator;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import br.com.kerubin.api.cadastros.cliente.entity.cliente.ClienteEntity;
import javax.persistence.ManyToOne;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.validation.constraints.NotNull;
import br.com.kerubin.api.cadastros.cliente.entity.recurso.RecursoEntity;
import javax.persistence.OneToMany;
import javax.persistence.CascadeType;
import javax.persistence.JoinTable;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.HashSet;

@Entity
@Table(name = "compromisso")
public class CompromissoEntity extends AuditingEntity {

	@GeneratedValue(generator = "uuid2")
	@GenericGenerator(name = "uuid2", strategy = "uuid2")
	@Id
	@Column(name="id")
	private java.util.UUID id;
	
	@NotBlank(message="\"Título\" é obrigatório.")
	@Size(max = 255, message = "\"Título\" pode ter no máximo 255 caracteres.")
	@Column(name="titulo")
	private String titulo;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cliente")
	private ClienteEntity cliente;
	
	@NotNull(message="\"Data de início\" é obrigatório.")
	@Column(name="data_ini")
	private java.time.LocalDate dataIni;
	
	@NotNull(message="\"Hora de início\" é obrigatório.")
	@Column(name="hora_ini")
	private java.time.LocalTime horaIni;
	
	@Column(name="data_fim")
	private java.time.LocalDate dataFim;
	
	@Column(name="hora_fim")
	private java.time.LocalTime horaFim;
	
	@Column(name="dia_todo")
	private Boolean diaTodo = false;
	
	@Size(max = 1000, message = "\"Descrição\" pode ter no máximo 1000 caracteres.")
	@Column(name="descricao")
	private String descricao;
	
	@Size(max = 255, message = "\"Local\" pode ter no máximo 255 caracteres.")
	@Column(name="local")
	private String local;
	
	@OneToMany(fetch = FetchType.LAZY/*, cascade = {CascadeType.PERSIST, CascadeType.MERGE}*/)
	@JoinTable(name = "compromisso_recursos",
		joinColumns = @JoinColumn(name = "compromisso_id"/*, referencedColumnName = "id"*/),
		inverseJoinColumns = @JoinColumn(name = "recurso_id"/*, referencedColumnName = "id"*/)
	)
	private Set<RecursoEntity> recursos = new HashSet<>();
	
	public java.util.UUID getId() {
		return id;
	}
	
	public String getTitulo() {
		return titulo;
	}
	
	public ClienteEntity getCliente() {
		return cliente;
	}
	
	public java.time.LocalDate getDataIni() {
		return dataIni;
	}
	
	public java.time.LocalTime getHoraIni() {
		return horaIni;
	}
	
	public java.time.LocalDate getDataFim() {
		return dataFim;
	}
	
	public java.time.LocalTime getHoraFim() {
		return horaFim;
	}
	
	public Boolean getDiaTodo() {
		return diaTodo;
	}
	
	public String getDescricao() {
		return descricao;
	}
	
	public String getLocal() {
		return local;
	}
	
	public java.util.Set<RecursoEntity> getRecursos() {
		return recursos;
	}
	
	public void setId(java.util.UUID id) {
		this.id = id;
	}
	
	public void setTitulo(String titulo) {
		this.titulo = titulo != null ? titulo.trim() : titulo; // Chamadas REST fazem trim.
	}
	
	public void setCliente(ClienteEntity cliente) {
		this.cliente = cliente;
	}
	
	public void setDataIni(java.time.LocalDate dataIni) {
		this.dataIni = dataIni;
	}
	
	public void setHoraIni(java.time.LocalTime horaIni) {
		this.horaIni = horaIni;
	}
	
	public void setDataFim(java.time.LocalDate dataFim) {
		this.dataFim = dataFim;
	}
	
	public void setHoraFim(java.time.LocalTime horaFim) {
		this.horaFim = horaFim;
	}
	
	public void setDiaTodo(Boolean diaTodo) {
		this.diaTodo = diaTodo;
	}
	
	public void setDescricao(String descricao) {
		this.descricao = descricao != null ? descricao.trim() : descricao; // Chamadas REST fazem trim.
	}
	
	public void setLocal(String local) {
		this.local = local != null ? local.trim() : local; // Chamadas REST fazem trim.
	}
	
	public void setRecursos(java.util.Set<RecursoEntity> recursos) {
		this.recursos = recursos;
	}
	
	public void addRecurso(RecursoEntity recurso) {
		this.recursos.add(recurso);
	}
	
	public void removeRecurso(RecursoEntity recurso) {
		this.recursos.remove(recurso);
	}
	
	public void assign(CompromissoEntity source) {
		if (source != null) {
			this.setId(source.getId());
			this.setTitulo(source.getTitulo());
			this.setCliente(source.getCliente());
			this.setDataIni(source.getDataIni());
			this.setHoraIni(source.getHoraIni());
			this.setDataFim(source.getDataFim());
			this.setHoraFim(source.getHoraFim());
			this.setDiaTodo(source.getDiaTodo());
			this.setDescricao(source.getDescricao());
			this.setLocal(source.getLocal());
			this.setRecursos(source.getRecursos());
			this.setCreatedBy(source.getCreatedBy());
			this.setCreatedDate(source.getCreatedDate());
			this.setLastModifiedBy(source.getLastModifiedBy());
			this.setLastModifiedDate(source.getLastModifiedDate());
		}
	}
	
	public CompromissoEntity clone() {
		return clone(new java.util.HashMap<>());
	}
	
	public CompromissoEntity clone(java.util.Map<Object, Object> visited) {
		if (visited.containsKey(this)) {
			return (CompromissoEntity) visited.get(this);
		}
				
		CompromissoEntity theClone = new CompromissoEntity();
		visited.put(this, theClone);
		
		theClone.setId(this.getId());
		theClone.setTitulo(this.getTitulo());
		theClone.setCliente(this.getCliente() != null ? this.getCliente().clone(visited) : null);
		theClone.setDataIni(this.getDataIni());
		theClone.setHoraIni(this.getHoraIni());
		theClone.setDataFim(this.getDataFim());
		theClone.setHoraFim(this.getHoraFim());
		theClone.setDiaTodo(this.getDiaTodo());
		theClone.setDescricao(this.getDescricao());
		theClone.setLocal(this.getLocal());
		theClone.setRecursos(this.getRecursos() != null ? this.getRecursos().stream().map(it -> it.clone(visited)).collect(java.util.stream.Collectors.toSet()) : null);
		theClone.setCreatedBy(this.getCreatedBy());
		theClone.setCreatedDate(this.getCreatedDate());
		theClone.setLastModifiedBy(this.getLastModifiedBy());
		theClone.setLastModifiedDate(this.getLastModifiedDate());
		
		return theClone;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CompromissoEntity other = (CompromissoEntity) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		
		return true;
	}
	
	@Override
	public int hashCode() {
		return 31;
	}
	
	/* 
	@Override
	public String toString() {
		// Enabling toString for JPA entities will implicitly trigger lazy loading on all fields.
	}
	*/

}
