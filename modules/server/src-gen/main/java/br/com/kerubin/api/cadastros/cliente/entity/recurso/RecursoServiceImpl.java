/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.cliente.entity.recurso;

// import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Optional;
 
@Service
public class RecursoServiceImpl implements RecursoService {
	
	@Autowired
	private RecursoRepository recursoRepository;
	
	@Autowired
	private RecursoListFilterPredicate recursoListFilterPredicate;
	
	
	@Transactional
	@Override
	public RecursoEntity create(RecursoEntity recursoEntity) {
		return recursoRepository.save(recursoEntity);
	}
	
	@Transactional(readOnly = true)
	@Override
	public RecursoEntity read(java.util.UUID id) {
		return getRecursoEntity(id);
	}
	
	@Transactional
	@Override
	public RecursoEntity update(java.util.UUID id, RecursoEntity recursoEntity) {
		// RecursoEntity entity = getRecursoEntity(id);
		// BeanUtils.copyProperties(recursoEntity, entity, "id");
		// entity = recursoRepository.save(entity);
		
		RecursoEntity entity = recursoRepository.save(recursoEntity);
		
		return entity;
	}
	
	@Transactional
	@Override
	public void delete(java.util.UUID id) {
		
		// Delete it.
		recursoRepository.deleteById(id);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		recursoRepository.flush();
		
	}
	
	@Transactional
	@Override
	public void deleteInBulk(java.util.List<java.util.UUID> idList) {
		// Delete it.
		recursoRepository.deleteInBulk(idList);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		recursoRepository.flush();
	}
	
	
	@Transactional(readOnly = true)
	@Override
	public Page<RecursoEntity> list(RecursoListFilter recursoListFilter, Pageable pageable) {
		Predicate predicate = recursoListFilterPredicate.mountAndGetPredicate(recursoListFilter);
		
		Page<RecursoEntity> resultPage = recursoRepository.findAll(predicate, pageable);
		return resultPage;
	}
	
	@Transactional(readOnly = true)
	protected RecursoEntity getRecursoEntity(java.util.UUID id) {
		Optional<RecursoEntity> recursoEntity = recursoRepository.findById(id);
		if (!recursoEntity.isPresent()) {
			throw new IllegalArgumentException("Recurso not found:" + id.toString());
		}
		return recursoEntity.get();
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<RecursoAutoComplete> autoComplete(String query) {
		Collection<RecursoAutoComplete> result = recursoRepository.autoComplete(query);
		return result;
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<RecursoNomeAutoComplete> recursoNomeAutoComplete(String query) {
		Collection<RecursoNomeAutoComplete> result = recursoRepository.recursoNomeAutoComplete(query);
		return result;
	}
	
	
}
